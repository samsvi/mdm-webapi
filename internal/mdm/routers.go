/*
 * Patient Management Api
 *
 * Patient and Medical Records management for Web-In-Cloud system
 *
 * API version: 1.0.0
 * Contact: your-email@example.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package mdm

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the MedicalRecordsAPI part of the API
	MedicalRecordsAPI MedicalRecordsAPI
	// Routes for the PatientsAPI part of the API
	PatientsAPI PatientsAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{ 
		{
			"CreateMedicalRecord",
			http.MethodPost,
			"/api/patients/:patientId/medical-records",
			handleFunctions.MedicalRecordsAPI.CreateMedicalRecord,
		},
		{
			"DeleteMedicalRecord",
			http.MethodDelete,
			"/api/patients/:patientId/medical-records/:recordId",
			handleFunctions.MedicalRecordsAPI.DeleteMedicalRecord,
		},
		{
			"GetPatientMedicalRecords",
			http.MethodGet,
			"/api/patients/:patientId/medical-records",
			handleFunctions.MedicalRecordsAPI.GetPatientMedicalRecords,
		},
		{
			"UpdateMedicalRecord",
			http.MethodPut,
			"/api/patients/:patientId/medical-records/:recordId",
			handleFunctions.MedicalRecordsAPI.UpdateMedicalRecord,
		},
		{
			"CreatePatient",
			http.MethodPost,
			"/api/patients",
			handleFunctions.PatientsAPI.CreatePatient,
		},
		{
			"DeletePatient",
			http.MethodDelete,
			"/api/patients/:patientId",
			handleFunctions.PatientsAPI.DeletePatient,
		},
		{
			"GetAllPatients",
			http.MethodGet,
			"/api/patients",
			handleFunctions.PatientsAPI.GetAllPatients,
		},
		{
			"GetPatient",
			http.MethodGet,
			"/api/patients/:patientId",
			handleFunctions.PatientsAPI.GetPatient,
		},
		{
			"UpdatePatient",
			http.MethodPut,
			"/api/patients/:patientId",
			handleFunctions.PatientsAPI.UpdatePatient,
		},
	}
}
